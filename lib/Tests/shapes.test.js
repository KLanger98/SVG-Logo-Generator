const {Circle, Square, Triangle} = require("../shapes.js")


describe('Circle', () => {
    describe('Construct circle object', () =>{
        it('Checks whether an instance of circle exists after calling the Circle class', () => {
            var myCircle = new Circle();
            expect(myCircle).toBeInstanceOf(Circle);
        })
    })
    describe('Check object color', () =>{
        it('Checks whether a color selected will be added to the fill key value pair', () => {
            var myCircle = new Circle();
            myCircle.setColor("green");
            expect(myCircle.fill).toBe("green");
        })
    })
    describe('Check rendered XML', () =>{
        it('Checks whether the XML generated by the Circle.render() function is correct', () => {
            var myCircle = new Circle();
            myCircle.setColor("green");
            console.log(myCircle.render())
            expect(myCircle.render()).toBe(`<circle cx=25 cy=75 r=20 fill=green/>`);
        })
    })
})

describe('Square', () => {
    describe('Construct Square object', () =>{
        it('Checks whether an instance of square exists after calling the Square class', () => {
            var mySquare = new Square();
            expect(mySquare).toBeInstanceOf(Square);
        })
    })
    describe('Check object color', () =>{
        it('Checks whether a color selected will be added to the fill key value pair', () => {
            var mySquare = new Circle();
            mySquare.setColor("green");
            expect(mySquare.fill).toBe("green");
        })
    })
    describe('Check rendered XML', () =>{
        it('Checks whether the XML generated by the Square.render() function is correct', () => {
            var mySquare = new Square();
            mySquare.setColor("green");
            console.log(mySquare.render())
            expect(mySquare.render()).toBe(`<rect x=10 y=10 width=30 height=30/>`);
        })
    })
})

describe('Triangle', () => {
    describe('Construct Triangle object', () =>{
        it('Checks whether an instance of Triangle exists after calling the Triangle class', () => {
            var myTriangle = new Triangle();
            expect(myTriangle).toBeInstanceOf(Triangle);
        })
    })
    describe('Check object color', () =>{
        it('Checks whether a color selected will be added to the fill key value pair', () => {
            var myTriangle = new Triangle();
            myTriangle.setColor("green");
            expect(myTriangle.fill).toBe("green");
        })
    })
    describe('Check rendered XML', () =>{
        it('Checks whether the XML generated by the Triangle.render() function is correct', () => {
            var myTriangle = new Triangle();
            myTriangle.setColor("green");
            console.log(myTriangle.render())
            expect(myTriangle.render()).toBe(`<polygon points="150, 18 244, 182 56, 182"`);
        })
    })
}

)